generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  firstName   String
  lastName    String
  role        UserRole @default(STUDENT)
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  studentId     String?
  major         String?
  year          Int?
  gpa           Float?
  phone         String?
  
  companyName   String?
  position      String?
  companySize   String?
  industry      String?
  
  applications  Application[]
  opportunities Opportunity[]
  
  @@map("users")
}

model Program {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String
  duration    String
  requirements String
  benefits    String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  applications Application[]
  opportunities Opportunity[]
  
  @@map("programs")
}

model Application {
  id              String            @id @default(cuid())
  status          ApplicationStatus @default(PENDING)
  submittedAt     DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  coverLetter     String?
  motivation      String?
  experience      String?
  skills          String?
  
  userId          String
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  programId       String
  program         Program           @relation(fields: [programId], references: [id])
  opportunityId   String?
  opportunity     Opportunity?      @relation(fields: [opportunityId], references: [id])
  
  @@map("applications")
}

model Opportunity {
  id            String            @id @default(cuid())
  title         String
  description   String
  requirements  String
  compensation  String?
  location      String?
  isRemote      Boolean           @default(false)
  deadline      DateTime?
  startDate     DateTime?
  duration      String?
  status        OpportunityStatus @default(ACTIVE)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  
  companyId     String
  company       User              @relation(fields: [companyId], references: [id], onDelete: Cascade)
  programId     String
  program       Program           @relation(fields: [programId], references: [id])
  applications  Application[]
  
  @@map("opportunities")
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String
  status    String   @default("NEW")
  createdAt DateTime @default(now())
  
  @@map("contacts")
}

enum UserRole {
  STUDENT
  EMPLOYER
  ADMIN
}

enum ApplicationStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
  WITHDRAWN
}

enum OpportunityStatus {
  DRAFT
  ACTIVE
  CLOSED
  EXPIRED
}
